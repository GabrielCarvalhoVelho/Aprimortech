package com.example.aprimortech.data.repository

import android.util.Log
import com.example.aprimortech.data.local.dao.PecaDao
import com.example.aprimortech.data.local.entity.toEntity
import com.example.aprimortech.data.local.entity.toModel
import com.example.aprimortech.model.Peca
import com.google.firebase.firestore.FirebaseFirestore
import kotlinx.coroutines.tasks.await
import kotlinx.coroutines.flow.Flow
import kotlinx.coroutines.flow.map
import java.util.UUID
import javax.inject.Inject
import javax.inject.Singleton

/**
 * Reposit√≥rio de Pe√ßas com suporte completo para opera√ß√£o offline
 *
 * Estrat√©gia:
 * 1. SEMPRE salva localmente primeiro (garantia de persist√™ncia offline)
 * 2. Tenta sincronizar com Firebase quando h√° conex√£o
 * 3. Marca itens como pendentes se sincroniza√ß√£o falhar
 * 4. L√™ dados locais como fonte prim√°ria
 */
@Singleton
class PecaRepository @Inject constructor(
    private val firestore: FirebaseFirestore,
    private val pecaDao: PecaDao
) {
    companion object {
        private const val TAG = "PecaRepository"
        private const val COLLECTION_PECAS = "pecas"
    }

    /**
     * Busca todas as pe√ßas - Prioriza cache local
     */
    suspend fun buscarPecas(): List<Peca> {
        return try {
            Log.d(TAG, "üìÇ Buscando pe√ßas do cache local...")
            val pecasLocais = pecaDao.buscarTodasPecas()

            Log.d(TAG, "üìä ${pecasLocais.size} pe√ßas no cache local")

            if (pecasLocais.isEmpty()) {
                Log.d(TAG, "‚ö†Ô∏è Cache vazio, buscando do Firebase...")
                return buscarPecasDoFirebase()
            } else {
                Log.d(TAG, "‚úÖ Retornando ${pecasLocais.size} pe√ßas do cache local")
                pecasLocais.map { it.toModel() }
            }
        } catch (e: Exception) {
            Log.e(TAG, "‚ùå Erro ao buscar pe√ßas", e)
            // Retorna cache local mesmo em caso de erro
            pecaDao.buscarTodasPecas().map { it.toModel() }
        }
    }

    /**
     * Busca pe√ßas do Firebase e atualiza cache local
     */
    private suspend fun buscarPecasDoFirebase(): List<Peca> {
        return try {
            val snapshot = firestore.collection(COLLECTION_PECAS)
                .get()
                .await()

            val pecas = snapshot.documents.mapNotNull { doc ->
                doc.toObject(Peca::class.java)?.copy(id = doc.id)
            }

            // Atualiza cache local
            if (pecas.isNotEmpty()) {
                val entities = pecas.map { it.toEntity(pendenteSincronizacao = false) }
                pecaDao.inserirPecas(entities)
                Log.d(TAG, "‚úÖ Cache local atualizado com ${pecas.size} pe√ßas do Firebase")
            }

            pecas
        } catch (e: Exception) {
            Log.e(TAG, "‚ùå Erro ao buscar pe√ßas do Firebase", e)
            // Retorna cache local se Firebase falhar
            pecaDao.buscarTodasPecas().map { it.toModel() }
        }
    }

    /**
     * Observa mudan√ßas nas pe√ßas em tempo real (Flow)
     */
    fun observarPecas(): Flow<List<Peca>> {
        return pecaDao.observarTodasPecas()
            .map { entities -> entities.map { it.toModel() } }
    }

    /**
     * Busca pe√ßa por ID
     */
    suspend fun buscarPecaPorId(id: String): Peca? {
        return try {
            // Busca primeiro no cache local
            val local = pecaDao.buscarPecaPorId(id)
            if (local != null) {
                return local.toModel()
            }

            // Se n√£o encontrar, busca no Firebase
            val doc = firestore.collection(COLLECTION_PECAS)
                .document(id)
                .get()
                .await()

            doc.toObject(Peca::class.java)?.copy(id = doc.id)?.also { peca ->
                // Salva no cache
                pecaDao.inserirPeca(peca.toEntity(pendenteSincronizacao = false))
            }
        } catch (e: Exception) {
            Log.e(TAG, "Erro ao buscar pe√ßa por ID", e)
            null
        }
    }

    /**
     * Salva pe√ßa com estrat√©gia offline-first
     */
    suspend fun salvarPeca(peca: Peca): String {
        return try {
            // 1. Gera ID se necess√°rio
            val pecaId = peca.id.ifEmpty { UUID.randomUUID().toString() }
            val pecaComId = peca.copy(id = pecaId)

            // 2. SEMPRE salva localmente primeiro
            val entity = pecaComId.toEntity(pendenteSincronizacao = true)
            pecaDao.inserirPeca(entity)
            Log.d(TAG, "‚úÖ Pe√ßa '${peca.codigo}' salva localmente")

            // 3. Tenta sincronizar com Firebase
            try {
                firestore.collection(COLLECTION_PECAS)
                    .document(pecaId)
                    .set(pecaComId)
                    .await()

                // Marca como sincronizado
                pecaDao.marcarComoSincronizado(pecaId)
                Log.d(TAG, "‚úÖ Pe√ßa '${peca.codigo}' sincronizada com Firebase")
            } catch (e: Exception) {
                Log.w(TAG, "‚ö†Ô∏è Falha na sincroniza√ß√£o com Firebase, mantido como pendente", e)
                // Pe√ßa permanece marcada como pendente de sincroniza√ß√£o
            }

            pecaId
        } catch (e: Exception) {
            Log.e(TAG, "‚ùå Erro ao salvar pe√ßa", e)
            throw Exception("Erro ao salvar pe√ßa: ${e.message}")
        }
    }

    /**
     * Exclui pe√ßa com estrat√©gia offline-first
     */
    suspend fun excluirPeca(id: String) {
        try {
            // 1. Remove do cache local imediatamente
            pecaDao.deletarPecaPorId(id)
            Log.d(TAG, "‚úÖ Pe√ßa exclu√≠da do cache local")

            // 2. Tenta excluir do Firebase
            try {
                firestore.collection(COLLECTION_PECAS)
                    .document(id)
                    .delete()
                    .await()
                Log.d(TAG, "‚úÖ Pe√ßa exclu√≠da do Firebase")
            } catch (e: Exception) {
                Log.w(TAG, "‚ö†Ô∏è Falha ao excluir do Firebase, ser√° removido na pr√≥xima sincroniza√ß√£o", e)
            }
        } catch (e: Exception) {
            Log.e(TAG, "‚ùå Erro ao excluir pe√ßa", e)
            throw Exception("Erro ao excluir pe√ßa: ${e.message}")
        }
    }

    /**
     * Sincroniza pe√ßas pendentes com Firebase
     */
    suspend fun sincronizarPecasPendentes(): Int {
        return try {
            val pendentes = pecaDao.buscarPecasPendentesSincronizacao()
            Log.d(TAG, "Sincronizando ${pendentes.size} pe√ßas pendentes...")

            var sincronizados = 0
            pendentes.forEach { entity ->
                try {
                    firestore.collection(COLLECTION_PECAS)
                        .document(entity.id)
                        .set(entity.toModel())
                        .await()

                    pecaDao.marcarComoSincronizado(entity.id)
                    sincronizados++
                    Log.d(TAG, "‚úÖ Pe√ßa '${entity.codigo}' sincronizada")
                } catch (e: Exception) {
                    Log.w(TAG, "‚ö†Ô∏è Falha ao sincronizar pe√ßa '${entity.codigo}'", e)
                }
            }

            Log.d(TAG, "‚úÖ ${sincronizados}/${pendentes.size} pe√ßas sincronizadas")
            sincronizados
        } catch (e: Exception) {
            Log.e(TAG, "‚ùå Erro ao sincronizar pe√ßas pendentes", e)
            0
        }
    }

    /**
     * For√ßa sincroniza√ß√£o completa com Firebase
     * Baixa todas as pe√ßas do Firebase e atualiza cache local
     */
    suspend fun sincronizarComFirebase() {
        try {
            Log.d(TAG, "Iniciando sincroniza√ß√£o completa com Firebase...")

            // 1. Sincroniza pendentes locais para Firebase
            sincronizarPecasPendentes()

            // 2. Baixa dados atualizados do Firebase
            buscarPecasDoFirebase()

            Log.d(TAG, "‚úÖ Sincroniza√ß√£o completa finalizada")
        } catch (e: Exception) {
            Log.e(TAG, "‚ùå Erro na sincroniza√ß√£o completa", e)
        }
    }

    /**
     * Retorna quantidade de pe√ßas pendentes de sincroniza√ß√£o
     */
    suspend fun contarPecasPendentes(): Int {
        return try {
            pecaDao.contarPecasPendentes()
        } catch (e: Exception) {
            Log.e(TAG, "Erro ao contar pe√ßas pendentes", e)
            0
        }
    }
}
